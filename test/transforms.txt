var a = true;
====
$a = true;

----
var $ = 1;
====
$«24» = 1.0;

----
var toString = undefined;
====
$toString = $undefined;

----
a = a || b;
====
$a = (is($or_ = $a) ? $or_ : $b);

----
x = a && a.b && a.b.c;
====
$x = (is($and_ = (is($and1_ = $a) ? get($a, "b") : $and1_)) ? get(get($a, "b"), "c") : $and_);

----
console.log('hi ' + name + '!');
====
call_method($console, "log", _concat("hi ", $name, "!"));

----
x = a + b / c + d;
====
$x = _plus($a, _divide($b, $c), $d);

----
x = 'a';
x += 'b';
====
$x = "a";
$x = _plus($x, "b");

----
x = a % b;
====
$x = (float)(to_number($a) % to_number($b));

----
x = a * b;
====
$x = to_number($a) * to_number($b);

----
x = a - 1 - 2;
====
$x = to_number($a) - 1.0 - 2.0;

----
true ? 'true' : false ? 't' : 'f';
====
true ? "true" : (false ? "t" : "f");

----
true ? 'true' : f();
====
true ? "true" : call($f);

----
~1;
====
(float)~1.0;

----
~a;
====
(float)~to_number($a);

----
typeof a;
====
(isset($a) ? _typeof($a) : "undefined");

----
x = a + (function(c) { return b == c; })() + c;
====
$x = _plus($a, call(new Func(function($c = null) use (&$b) {
  return eq($b, $c);
})), $c);

----
var a = function a() {
  return this;
};
====
$a = new Func("a", function() {
  $this_ = Func::getContext();
  return $this_;
});

----
var a = function a() {
  "use strict";
  return this;
};
====
$a = new Func("a", function() {
  $this_ = Func::getContext();
  return $this_;
}, array("strict" => true));

----
"use strict";
function f() {
  return function() {};
}
====
$f = new Func("f", function() {
  return new Func(function() {
  }, array("strict" => true));
}, array("strict" => true));

----
function fn() {
  var f = new Function('a', 'b', 'return a + b');
}
====
$fn = new Func("fn", function() {
  $f = new Func(function($a = null, $b = null) {
    return _plus($a, $b);
  });
});

----
"use strict";
(function(global) {
  console.log('global', global);
})(new Function('return this')())
====
call(new Func(function($global = null) use (&$console) {
  call_method($console, "log", "global", $global);
}, array("strict" => true)), call(new Func(function() {
  $this_ = Func::getContext();
  return $this_;
})));

----
var result = a('foo');
function a(x, y) {
  return x + y;
}
====
$a = new Func("a", function($x = null, $y = null) {
  return _plus($x, $y);
});
$result = call($a, "foo");

----
if (a) b();
====
if (is($a)) {
  call($b);
}

----
if (a == b) c();
====
if (eq($a, $b)) {
  call($c);
}

----
if (a != b) c();
====
if (!eq($a, $b)) {
  call($c);
}

----
if (a && (b || c)) {}
====
if (is($a) && (is($b) || is($c))) {
}

----
if (a in b) c();
====
if (_in($a, $b)) {
  call($c);
}

----
if (a) {}
====
if (is($a)) {
}

----
if (a)
  b();
else
  c();
====
if (is($a)) {
  call($b);
} else {
  call($c);
}

----
if (a)
  b();
else if (c)
  d();
else
  e();
====
if (is($a)) {
  call($b);
} else if (is($c)) {
  call($d);
} else {
  call($e);
}

----
x = a > b && c > d;
====
$x = cmp($a, '>', $b) && cmp($c, '>', $d);

----
x = !a || !b;
====
$x = not($a) || not($b);

----
if (a || b && !c || d < e) {}
====
if (is($a) || is($b) && not($c) || cmp($d, '<', $e)) {
}

----
if ([]) true;
====
if (is(new Arr())) {
  true;
}

----
x = (a || b && !c || d < e) ? 1 : 2;
====
$x = is($a) || is($b) && not($c) || cmp($d, '<', $e) ? 1.0 : 2.0;

----
var a = [1,,2];
====
$a = new Arr(1.0, Arr::$empty, 2.0);

----
for (var i = 0; i < 2; i++);
====
for ($i = 0.0; cmp($i, '<', 2.0); $i++) {
}

----
for (;;) {}
====
for (; ; ) {
}

----
for (i = 1, j = 2; a(), b(); false);
====
for ($i = 1.0, $j = 2.0; is(_seq(call($a), call($b))); false) {
}

----
var a = 1, b = 2;
for (var i = 0, j = 1; i < 2; ++i);
====
$a = 1.0; $b = 2.0;
for ($i = 0.0, $j = 1.0; cmp($i, '<', 2.0); ++$i) {
}

----
for (n in o) {}
====
foreach (keys($o) as $n) {
}

----
for (i in []) {}
====
foreach (keys(new Arr()) as $i) {
}

----
var e = true;
try {
  throw new Error('foo');
} catch(e) {
  assert(e instanceof Error);
}
assert(e === true);
====
$e = true;
try {
  throw new Ex(_new($Error, "foo"));
} catch(Exception $e_2_) {
  if ($e_2_ instanceof Ex) $e_2_ = $e_2_->value;
  call($assert, _instanceof($e_2_, $Error));
}
call($assert, $e === true);

----
function f() {
  return f;
}
====
$f = new Func("f", function() {
  $f = Func::getCurrent();
  return $f;
});

----
a = {a: 1, undefined: undefined, null: null};
====
$a = new Obj("a", 1.0, "undefined", $undefined, "null", Obj::$null);

----
undefined = 1;
var f = function(undefined) {
  return undefined++;
}
====
$undefined_ = 1.0;
$f = new Func(function($undefined = null) {
  return $undefined++;
});

----
function $() {
  this.foo += 1;
  return $;
}
====
$«24» = new Func("\$", function() {
  $«24» = Func::getCurrent();
  $this_ = Func::getContext();
  set($this_, "foo", 1.0, "+=");
  return $«24»;
});

----
var a = [1, false, null, undefined, new Date(), a];
====
$a = new Arr(1.0, false, Obj::$null, $undefined, _new($Date), $a);

----
var a = function a() {
  console.log('foo');
  var x = 5;
  function b(y) {
    console.log(x - y);
    return a;
  }
};
====
$a = new Func("a", function() use (&$console) {
  $a = Func::getCurrent();
  $b = new Func("b", function($y = null) use (&$console, &$x, &$a) {
    call_method($console, "log", to_number($x) - to_number($y));
    return $a;
  });
  call_method($console, "log", "foo");
  $x = 5.0;
});

----
var r = /ab\/(c|d)$/ig;
r.match(s);
====
$r = new RegExp("ab/(c|d)\$", "gi");
call_method($r, "match", $s);

----
(function() {
  var request = process.request;
  var response = process.response;
  var resHeaders = {
    'Content-Type': 'text/plain'
  };
  response.writeHead(200, 'OK', resHeaders);
  response.write(request.getMethod() + ' ' + request.getURL() + '\n');
  var reqHeaders = request.getHeaders();
  Object.keys(reqHeaders).forEach(function(key) {
    response.write(key + ': ' + reqHeaders[key] + '\n');
  });
  response.end();
})();
====
call(new Func(function() use (&$process, &$Object) {
  $request = get($process, "request");
  $response = get($process, "response");
  $resHeaders = new Obj("Content-Type", "text/plain");
  call_method($response, "writeHead", 200.0, "OK", $resHeaders);
  call_method($response, "write", _concat(call_method($request, "getMethod"), " ", call_method($request, "getURL"), "\n"));
  $reqHeaders = call_method($request, "getHeaders");
  call_method(call_method($Object, "keys", $reqHeaders), "forEach", new Func(function($key = null) use (&$response, &$reqHeaders) {
    call_method($response, "write", _concat($key, ": ", get($reqHeaders, $key), "\n"));
  }));
  call_method($response, "end");
}));
----
a = 0xFFF;
====
$a = (float)0xFFF;

----
a = 0123;
====
$a = (float)0123;

----
a = 0o123;
====
$a = (float)0123;

----
a = 0b101;
====
$a = (float)0b101;

----
a = 5 >>> 2;
====
$a = _bitwise_zfrs(5.0, 2.0);

----
if (a <= b) c();
====
if (cmp($a, '<=', $b)) {
  call($c);
}

----
if (a >= b) c();
====
if (cmp($a, '>=', $b)) {
  call($c);
}


----
(function () {
  var a = __dirname;
})();
====
call(new Func(function() {
  $a = __DIR__;
}));

----
var util = require('util');
====
$util = call($require, "util", __DIR__);

----
var a = '\xA0';
====
$a = "\xC2\xA0";

----
var a = '"';
====
$a = "\"";

----
var a = '\b';
====
$a = "\x08";

----
var a = '\'';
====
$a = "'";

----
var a = "\b";
====
$a = "\x08";

----
var a = 8.64e15;
====
$a = 8.64e15;